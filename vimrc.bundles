" ==========================================
" bundle settings
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

set nocompatible
filetype off " required! turn off

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" fuzzy search plugin
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Autoformat
Plug 'Chiel92/vim-autoformat'

"vim-snippets and ultisnips
Plug 'honza/vim-snippets'

" semantic autocompleting
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-java', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-vetur', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-highlight', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-python', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-rls', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-vimtex', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-emmet', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-yank', {'do': 'yarn install --frozen-lockfile'}

" symbol autocompleting
Plug 'hyhugh/auto-pairs'
" tags autocompleting
Plug 'alvan/vim-closetag'
" quick comment out
Plug 'scrooloose/nerdcommenter'
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
" trailingwhitespace
Plug 'ntpeters/vim-better-whitespace'
" easymotion
Plug 'Lokaltog/vim-easymotion'
" quickscope
Plug 'unblevable/quick-scope'
" signature
Plug 'kshenoy/vim-signature'
" quick selection and edit
Plug 'terryma/vim-expand-region'
" multiplecursors
Plug 'mg979/vim-visual-multi'
" quickrun
Plug 'thinca/vim-quickrun'
" mundo
Plug 'simnalamburt/vim-mundo'
" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" rainbow_parentheses
Plug 'luochen1990/rainbow'
" solarized
Plug 'altercation/vim-colors-solarized'
Plug 'hyhugh/NeoSolarized'
" nerdtree nerdtreetabs
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'
" vista tagbar
Plug 'liuchengxu/vista.vim'
" text object
Plug 'kana/vim-textobj-user'
" line object : l   dal yal cil
Plug 'kana/vim-textobj-line'
" entire object : e   dae yae cie
Plug 'kana/vim-textobj-entire'
" indent object: i   dai yai cii
Plug 'kana/vim-textobj-indent'

" tmux suppoort
Plug 'christoomey/vim-tmux-navigator'

" extra syntax {{{
Plug 'justinmk/vim-syntax-extra'
Plug 'hail2u/vim-css3-syntax'
Plug 'posva/vim-vue'
Plug 'pangloss/vim-javascript'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'tikhomirov/vim-glsl'
Plug 'hdima/python-syntax'
Plug 'rust-lang/rust.vim'
Plug 'fatih/vim-go'
Plug 'hynek/vim-python-pep8-indent'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'elzr/vim-json'
Plug 'harenome/vim-mipssyntax'
Plug 'itchyny/vim-haskell-indent'
" }}}

" ctrlsf
Plug 'dyng/ctrlsf.vim'

" esay-easyescape
Plug 'hyhugh/vim-easyescape-plus'
" markdown support
" Plug 'suan/vim-instant-markdown', { 'for':['md', 'markdown'] }
" latex support
Plug 'lervag/vimtex'

call plug#end()


" ################### Configurations ######################
"
" NeoSolarized {{{
" This is only necessary if you use "set termguicolors".
" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
set background=dark
" set t_Co=256
colorscheme NeoSolarized
" set pb=20
" default value is "normal", Setting this option to "high" or "low" does use the
" same Solarized palette but simply shifts some values up or down in order to
" expand or compress the tonal range displayed.
let g:neosolarized_contrast = "normal"

" Special characters such as trailing whitespace, tabs, newlines, when displayed
" using ":set list" can be set to one of three levels depending on your needs.
" Default value is "normal". Provide "high" and "low" options.
let g:neosolarized_visibility = "normal"

" I make vertSplitBar a transparent background color. If you like the origin solarized vertSplitBar
" style more, set this value to 0.
let g:neosolarized_vertSplitBgTrans = 1

" If you wish to enable/disable NeoSolarized from displaying bold, underlined or italicized
" typefaces, simply assign 1 or 0 to the appropriate variable. Default values:
let g:neosolarized_bold = 1
let g:neosolarized_underline = 1
let g:neosolarized_italic = 1
" }}}

"Chiel92/vim-autoformat {{{
noremap <Leader>m :Autoformat<CR>
let g:formatters_jinja = ['htmlbeautify']
let g:formatters_python = ['black']
" }}}

" ################### AutoCompletion ###################
" coc {{{
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" autocmd FileType * let b:coc_root_patterns = ['.']
autocmd FileType python let b:coc_root_patterns = ['.pyroot']
autocmd FileType list set nonumber
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>lt <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if &filetype == 'vim'
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction
nmap <leader>lr <Plug>(coc-rename)
vmap <leader>m  <Plug>(coc-format-select)
nmap <silent> <leader>m  <Plug>(coc-format)
" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>la  <Plug>(coc-codeaction-selected)
nmap <leader>la  <Plug>(coc-codeaction)
nmap <leader>lf  <Plug>(coc-fix-current)

nnoremap <silent> <leader>ll  :<C-u>CocList<cr>
nnoremap <silent> <leader>ld  :<C-u>CocList diagnostics<cr>
nnoremap <silent> <leader>le  :<C-u>CocList extensions<cr>
nnoremap <silent> <leader>lm  :<C-u>CocList commands<cr>
nnoremap <silent> <leader>lo  :<C-u>CocList outline<cr>
nnoremap <silent> <leader>ls  :<C-u>CocList -I symbols<cr>
nnoremap <silent> <leader>lj  :<C-u>CocNext<CR>
nnoremap <silent> <leader>lk  :<C-u>CocPrev<CR>
nnoremap <silent> <leader>lp  :<C-u>CocListResume<CR>

imap <C-y> <Plug>(coc-snippets-expand)

" use c-d to expand the snippets and emmets
" HACK: currently coc-emmets requires coc#_select_confirm to expand an emmet
" snippet
inoremap <silent><expr> <c-d> pumvisible() ? coc#_select_confirm() : "<C-y>"

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

autocmd CursorHold * silent call CocActionAsync('highlight')
highlight CocHighlightText ctermbg=14 guibg=#033a48
" }}}

" closetag {{{
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
" }}}

" nerdcommenter {{{
let g:NERDSpaceDelims=1
let g:NERDAltDelims_python = 1
let g:NERDCustomDelimiters = { 'typescript.tsx': { 'left': '{/*','right': '*/}' } }
" }}}

" trailingwhitespace {{{
let g:better_whitespace_filetypes_blacklist=['ctrlsf', 'vim']
map <leader><leader>s :StripWhitespace<cr>
" }}}
" ################### 快速移动 ###################

" easymotion {{{
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)

map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}

" quickscope {{{
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" }}}

" expandregion {{{
vmap J <Plug>(expand_region_expand)
vmap K <Plug>(expand_region_shrink)

" Extend the global default
call expand_region#custom_text_objects({
            \ 'a]' :1,
            \ 'ab' :1,
            \ 'aB' :1,
            \ 'ii' :0,
            \ 'ai' :0,
            \ })
" }}}

" multiplecursors {{{
"}}}

" mundo {{{
noremap <leader>h :MundoToggle<CR>
set undofile
set undodir=~/.vim/undo
" }}}

" airline {{{
let g:airline_exclude_preview = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
" }}}

" rainbow_parentheses {{{
let g:rainbow_active = 1

let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'seagreen3', 'darkorchid3', 'firebrick3'],
            \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \       '*': {},
            \       'tex': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \       },
            \       'lisp': {
            \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \       },
            \       'vim': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \       },
            \       'html': {
            \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \       },
            \       'css': 0,
            \       'cmake': 0,
            \   }
            \}
" }}}

" nerdtree nerdtreetabs {{{
let NERDTreeHighlightCursorline=1
let NERDTreeMinimalMenu=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\.class$', '^__pycache__$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
let g:NERDTreeWinPos = "right"
nnoremap <silent> <leader>g :NERDTreeFind<cr>
" }}}

" nerdtreetabs {{{
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
" let g:nerdtree_tabs_synchronize_view=0
" let g:nerdtree_tabs_synchronize_focus=0
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_open_on_gui_startup=0
" }}}

" FZF {{{
au FileType fzf set nonu nornu
nnoremap <leader>. :Tags<cr>
nnoremap <leader>> :Tags <C-R><C-W><CR>
nnoremap <leader>p :FZF<CR>
nnoremap <leader>P :call fzf#vim#files('.', {'options':'--query '.expand('<cword>')})<CR>
nnoremap <leader>f :Rg<CR>
nnoremap <Leader>F :Rg <C-R><C-W><CR>
nnoremap <leader>l :BLines <CR>
nnoremap <leader>L :BLines <C-R><C-W><cr>

let g:fzf_buffers_jump = 1
" let g:fzf_tags_command = 'ctags -R'

" Vim Workspace Controller
" ctrlspace {{{
" let g:CtrlSpaceDefaultMappingKey = "<C-space>"
map <C-space> :CtrlSpace<CR>
" hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
" hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
" hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
" hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
hi link CtrlSpaceNormal   PMenu
hi link CtrlSpaceSelected PMenuSel
hi link CtrlSpaceSearch   Search
hi link CtrlSpaceStatus   StatusLine
" }}}

" vista tagbar {{{
map <F9> :Vista coc<cr>
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_default_executive = 'coc'
let g:vista_sidebar_position = "vertical topleft"
let g:vista_sidebar_width = 30
" }}

" pythonsyntax {{{
let python_highlight_all = 1
" }}}

" markdown {{{
let g:vim_markdown_folding_disabled=1
" let g:instant_markdown_autostart = 0
" }}}

" javascript {{{
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
" }}}

" json {{{
let g:vim_json_syntax_conceal = 0
" }}}

" golang support {{{
let g:go_fmt_autosave = 0
" }}}

" vim latex{{{
let g:vimtex_mappings_enabled = 0
let g:vimtex_view_automatic = 1
let g:vimtex_disable_version_warning = 1
let g:vimtex_compiler_latexmk = {'callback' : 0}
let g:vimtex_view_method = 'skim'
" }}}
"
"" ctrlsf {{{
let g:ctrlsf_search_mode = 'async'
nmap \ <Plug>CtrlSFCwordPath<CR>
nmap <leader>\ :CtrlSF 
let g:ctrlsf_auto_focus = {
            \ "at" : "start",
            \}
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
let g:ctrlsf_ackprg = 'rg'
let g:ctrlsf_case_sensitive = 'smart'
let g:ctrlsf_ignore_dir = ['tags']
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
            \ "open"  : "<Space>",
            \ "openb" : "O",
            \ "tab"   : "t",
            \ "tabb"  : "T",
            \ "prevw" : "p",
            \ "quit"  : "q",
            \ "next"  : "<C-J>",
            \ "prev"  : "<C-K>",
            \ "pquit" : "q",
            \ }
" }}}

"" vim easyescape {{{
let g:easyescape_string = "kj"
let g:easyescape_timeout = 300
"}}}

"" vim autopairs {{{
let g:AutoPairsShortcutFastWrap = "<C-e>"
let g:AutoPairsShortcutJump = '<C-l>'
let g:AutoPairsShortcutJumpBack = '<C-h>'
let g:AutoPairsMultilineClose = 0
"}}}

" vim-quickrun {{{
"}}}
"
"
" vim-css3-syntax {{{
augroup VimCSS3Syntax
    autocmd!
    autocmd FileType css setlocal iskeyword+=-
augroup END
"}}}
" typescript {{{
let g:vim_jsx_pretty_colorful_config = 1
"}}}
"------------------------------------------- end of configs --------------------------------------------
