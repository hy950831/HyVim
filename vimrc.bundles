" ==========================================
" bundle
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------
"
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

set nocompatible
filetype off " required! turn off

" inspired by spf13
if !exists('g:bundle_groups')
    let g:bundle_groups=['python', 'web-dev', 'markdown', 'go', 'latex', 'haskell', 'rust']
endif

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" fuzzy search plugin
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Autoformat
Plug 'Chiel92/vim-autoformat'

" ale
Plug 'w0rp/ale'

"vim-snippets and ultisnips
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" semantic autocompleting
Plug 'Valloric/YouCompleteMe'

" symbol autocompleting
" Plug 'Raimondi/delimitMate'
Plug 'hy950831/auto-pairs'

" tags autocompleting
Plug 'alvan/vim-closetag'

" quick comment out
Plug 'scrooloose/nerdcommenter'

" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'

" trailingwhitespace
" Plug 'bronson/vim-trailing-whitespace'
Plug 'ntpeters/vim-better-whitespace'

" easymotion
Plug 'Lokaltog/vim-easymotion'

" quickscope
Plug 'unblevable/quick-scope'

" signature
Plug 'kshenoy/vim-signature'

" quick selection and edit
Plug 'terryma/vim-expand-region'

" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" quickrun
Plug 'thinca/vim-quickrun'

" mundo
Plug 'simnalamburt/vim-mundo'

" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" rainbow_parentheses
Plug 'kien/rainbow_parentheses.vim'

" solarized
" Plug 'icymind/NeoSolarized'
Plug 'altercation/vim-colors-solarized'
Plug 'hy950831/NeoSolarized'


" nerdtree nerdtreetabs
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'

" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'

" tagbar
Plug 'majutsushi/tagbar'

" text object
Plug 'kana/vim-textobj-user'
" line object : l   dal yal cil
Plug 'kana/vim-textobj-line'
" entire object : e   dae yae cie
Plug 'kana/vim-textobj-entire'
" indent object: i   dai yai cii
Plug 'kana/vim-textobj-indent'

" tmux suppoort
Plug 'christoomey/vim-tmux-navigator'

" extra syntax
Plug 'justinmk/vim-syntax-extra'

" ctrlsf
Plug 'dyng/ctrlsf.vim'

" language client
Plug 'autozimu/LanguageClient-neovim', {
            \ 'branch': 'next',
            \ 'do': './install.sh'
            \ }

Plug 'hy950831/vim-easyescape'

Plug 'tikhomirov/vim-glsl'

" prolog support
if count(g:bundle_groups, 'prolog')
    Plug 'adimit/prolog.vim', { 'for': 'prolog' }
endif

" rust support
if count(g:bundle_groups, 'rust')
    Plug 'rust-lang/rust.vim', { 'for': 'rust' }
endif

" Go lang support
if count(g:bundle_groups, 'go')
    Plug 'fatih/vim-go', { 'for': 'go' }
endif

if count(g:bundle_groups, 'scala')
    Plug 'ensime/ensime-vim', { 'for': 'scala' }
endif

" Latex support
if count(g:bundle_groups, 'latex')
    Plug 'lervag/vimtex', { 'for': 'tex' }
endif

" MIPS HIGHLIGHTING
if count(g:bundle_groups, 'mips')
    Plug 'harenome/vim-mipssyntax', { 'for': 'mips' }
endif

" haskell
if count(g:bundle_groups, 'haskell')
    " Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }
    Plug 'itchyny/vim-haskell-indent'
endif

if count(g:bundle_groups, 'markdown')
    Plug 'plasticboy/vim-markdown', {'for': 'md'}
endif

if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax', {'for' : 'python'}
    Plug 'hynek/vim-python-pep8-indent', {'for' : 'python'}
    Plug 'Glench/Vim-Jinja2-Syntax'
endif

if count(g:bundle_groups, 'web-dev')
    Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
    Plug 'elzr/vim-json', {'for': 'json'}
    Plug 'mattn/emmet-vim', { 'for':'html, css' }
endif

call plug#end()


" ################### Configurations ######################

"Chiel92/vim-autoformat {{{
noremap <Leader>m :Autoformat<CR>
let g:formatters_jinja = ['htmlbeautify']
" }}}

" ale {{{
" pip install flake8
" npm install -g eslint eslint-plugin-standard eslint-plugin-promise eslint-config-standard
" npm install -g eslint-plugin-import eslint-plugin-node eslint-plugin-html babel-eslint
let g:ale_linters_explicit = 1
let g:ale_linters = {
            \   'python': ['flake8'],
            \}

let g:ale_python_flake8_options="--ignore=E114,E116,E131,E722 --max-line-length=120"

nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
nmap <silent> <Leader>en <Plug>(ale_next_wrap)
nnoremap <silent> <Leader>ec :ALEToggle<CR>

" }}}

" ################### 自动补全 ###################

" YouCompleteMe {{{
"
let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<DOWN>']
let g:ycm_key_list_select_completion = ['<tab>']
let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<UP>']
let g:ycm_key_list_previous_completion = ['<s-tab>']
let g:ycm_python_binary_path = '/usr/local/bin/python3'
let g:ycm_server_python_interpreter = '/usr/local/bin/python3'
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_show_diagnostics_ui = 0
let g:ycm_key_list_stop_completion = ['<C-c>']

let g:ycm_semantic_triggers =  {
            \   'c' : ['->', '.'],
            \   'cpp,objcpp' : ['->', '.', '::'],
            \   'perl' : ['->'],
            \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
            \    'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'rust' : ['.', '::'],
            \   'erlang' : [':'],
            \   'haskell' : ['.'],
            \ }

" vertical split
let g:ycm_goto_buffer_command = 'vertical-split'
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"

let g:ycm_key_invoke_completion = '<C-Space>'

" black list
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'gitcommit' : 1,
            \ 'mips' : 1,
            \}

let g:ycm_use_ultisnips_completer = 1
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_autoclose_preview_window_after_completion = 1

autocmd FileType java map <leader>la :YcmCompleter FixIt<cr>
autocmd FileType java map <leader>m :YcmCompleter Format<cr>
autocmd FileType java map <leader>lo :YcmCompleter OrganizeImports<cr>
autocmd FileType java map <leader>lr :YcmCompleter RefactorRename 
autocmd FileType java map <leader>lt :YcmCompleter GetType<cr>
" }}}


" ultisnips {{{
let g:UltiSnipsExpandTrigger       = "<c-d>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"

let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets'

" " " ctrl+j/k choose
" func! g:JInYCM()
    " if pumvisible()
        " return "\<C-n>"
    " else
        " return "\<c-j>"
    " endif
" endfunction

" func! g:KInYCM()
    " if pumvisible()
        " return "\<C-p>"
    " else
        " return "\<c-k>"
    " endif
" endfunction

" inoremap <c-j> <c-r>=g:JInYCM()<cr>
" au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
" let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
" }}}

" delimitMate {{{
" let delimitMate_autoclose = 1
" let delimitMate_jump_expansion= 1
" let delimitMate_expand_cr = 1
" }}}

" closetag {{{
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
" }}}

" nerdcommenter {{{
let g:NERDSpaceDelims=1
let g:NERDAltDelims_python = 1
" }}}

" trailingwhitespace {{{
let g:better_whitespace_filetypes_blacklist=['ctrlsf', 'vim']
map <leader><leader>s :StripWhitespace<cr>
" }}}
" ################### 快速移动 ###################

" easymotion {{{
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)

map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}

" quickscope {{{
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" }}}

" expandregion {{{
vmap J <Plug>(expand_region_expand)
vmap K <Plug>(expand_region_shrink)

" Extend the global default
call expand_region#custom_text_objects({
            \ 'a]' :1,
            \ 'ab' :1,
            \ 'aB' :1,
            \ 'ii' :0,
            \ 'ai' :0,
            \ })
" }}}

" multiplecursors {{{
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_insert_maps = {}

" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<esc>'

" Experimentally integrate YouCompleteMe with vim-multiple-cursors, otherwise
" the numerous Cursor events cause great slowness
" (https://github.com/kristijanhusak/vim-multiple-cursors/issues/4)
function Multiple_cursors_before()
  let s:old_ycm_whitelist = g:ycm_filetype_whitelist
  let g:ycm_filetype_whitelist = {}
endfunction

function Multiple_cursors_after()
  let g:ycm_filetype_whitelist = s:old_ycm_whitelist
endfunction
" }}}

" emmet {{{
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<c-m>'
autocmd FileType html,css EmmetInstall
" }}}

" mundo {{{
noremap <leader>h :MundoToggle<CR>
set undofile
set undodir=~/.vim/undo
" }}}

" airline {{{
let g:airline_exclude_preview = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
" }}}

" rainbow_parentheses {{{
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }}}

" solarized {{{
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
" }}}

" nerdtree nerdtreetabs {{{
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\.class$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
let g:NERDTreeWinPos = "right"
" }}}

" nerdtreetabs {{{
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
" let g:nerdtree_tabs_synchronize_view=0
" let g:nerdtree_tabs_synchronize_focus=0
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_open_on_gui_startup=0
" }}}

" FZF {{{
map <leader>. :Tags<cr>
map <leader>p :FZF<CR>
map <leader>f :Rg<CR>

nnoremap <leader>P :call fzf#vim#files('.', {'options':'--query '.expand('<cword>')})<CR>
nnoremap <leader>> :Tags <C-R><C-W><CR>
nnoremap <Leader>F :Rg <C-R><C-W><CR>

let g:fzf_buffers_jump = 1
" let g:fzf_tags_command = 'ctags -R'

" command! -bang -nargs=* Rg
            " \ call fzf#vim#grep(
            " \   'rg --column --line-number --no-heading --hidden --fixed-strings --follow --ignore-case --no-ignore --glob "!.git/*" --color=never '.shellescape(<q-args>), 1,
            " \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
            " \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
            " \   <bang>0)
" }}}

" Vim Workspace Controller
" ctrlspace {{{
" let g:CtrlSpaceDefaultMappingKey = "<C-space>"
map <C-space> :CtrlSpace<CR>
" hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
" hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
" hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
" hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
hi link CtrlSpaceNormal   PMenu
hi link CtrlSpaceSelected PMenuSel
hi link CtrlSpaceSearch   Search
hi link CtrlSpaceStatus   StatusLine
" }}}

" tagbar {{{
nmap <F9> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_left = 1

" quickrun {{{
let g:quickrun_config = {
            \   "_" : {
            \       "outputter" : "message",
            \   },
            \}
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
" }}}

" pythonsyntax {{{
let python_highlight_all = 1
" }}}

" markdown {{{
let g:vim_markdown_folding_disabled=1
" }}}

" javascript {{{
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
" }}}

" json {{{
let g:vim_json_syntax_conceal = 0
" }}}

" golang support {{{
let g:go_fmt_autosave = 0
" }}}

" vim latex{{{
let g:vimtex_mappings_enabled = 0
let g:vimtex_view_automatic = 1
" let g:vimtex_disable_version_warning = 1
let g:vimtex_compiler_latexmk = {'callback' : 0} 
let g:vimtex_view_method = 'skim'

autocmd FileType tex map <leader>li <plug>(vimtex-info)
autocmd FileType tex map <leader>lI <plug>(vimtex-info-full) map <leader>lt <plug>(vimtex-toc-open)
autocmd FileType tex map <leader>lT <plug>(vimtex-toc-toggle)
autocmd FileType tex map <leader>ly <plug>(vimtex-labels-open)
autocmd FileType tex map <leader>lY <plug>(vimtex-labels-toggle)
autocmd FileType tex map <leader>lq <plug>(vimtex-log)
autocmd FileType tex map <leader>lv <plug>(vimtex-view)
autocmd FileType tex map <leader>lr <plug>(vimtex-reverse-search)
autocmd FileType tex map <leader>ll <plug>(vimtex-compile)
autocmd FileType tex map <leader>lL <plug>(vimtex-compile-selected)
autocmd FileType tex map <leader>lk <plug>(vimtex-stop)
autocmd FileType tex map <leader>lK <plug>(vimtex-stop-all)
autocmd FileType tex map <leader>le <plug>(vimtex-errors)
autocmd FileType tex map <leader>lo <plug>(vimtex-compile-output)
autocmd FileType tex map <leader>lg <plug>(vimtex-status)
autocmd FileType tex map <leader>lG <plug>(vimtex-status-all)
autocmd FileType tex map <leader>lc <plug>(vimtex-clean)
autocmd FileType tex map <leader>lC <plug>(vimtex-clean-full)
autocmd FileType tex map <leader>lm <plug>(vimtex-imaps-list)
autocmd FileType tex map <leader>lx <plug>(vimtex-reload)
autocmd FileType tex map <leader>lX <plug>(vimtex-reload-state)
autocmd FileType tex map <leader>ls <plug>(vimtex-toggle-main)
" }}}
"
"haskell {{{
let g:LanguageClient_autoStart = 0
let g:LanguageClient_loadSettings = 0
let g:LanguageClient_serverCommands = {
            \ 'haskell': ['hie-wrapper', '--lsp'],
            \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
            \ }

autocmd FileType haskell,rust map <silent> <leader>m :call LanguageClient#textDocument_formatting()<cr>
autocmd FileType haskell,rust map <silent> <leader>lh :call LanguageClient#textDocument_hover()<CR>
autocmd FileType haskell,rust map <silent> <leader>li :call LanguageClient#textDocument_implementation()<CR>
autocmd FileType haskell,rust map <silent> <leader>ld :call LanguageClient#textDocument_definition()<CR>
autocmd FileType haskell,rust map <silent> <leader>lr :call LanguageClient#textDocument_rename()<CR>
autocmd FileType haskell,rust map <silent> <leader>la :call LanguageClient#textDocument_codeAction()<CR>
autocmd FileType haskell,rust map <silent> <leader>ls :LanguageClientStart<CR>
autocmd FileType haskell,rust map <silent> <leader>le :call LanguageClient#explainErrorAtPoint()<CR>
autocmd FileType haskell,rust set signcolumn=yes

" let g:haskell_classic_highlighting = 1
" let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
" let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
" let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
" let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
" let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
" let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
" let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
"}}}
"
"" ctrlsf {{{
    let g:ctrlsf_search_mode = 'async'
    nmap \ <Plug>CtrlSFCwordPath<CR>
    nmap <leader>\ :CtrlSF 
    let g:ctrlsf_auto_focus = {
                \ "at" : "start",
                \}
    " let g:ctrlsf_position = 'below'
    " let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_confirm_save = 0
    let g:ctrlsf_ackprg = 'rg'
    let g:ctrlsf_case_sensitive = 'smart'
    let g:ctrlsf_ignore_dir = ['tags']
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ "open"  : "<Space>",
        \ "openb" : "O",
        \ "tab"   : "t",
        \ "tabb"  : "T",
        \ "prevw" : "p",
        \ "quit"  : "q",
        \ "next"  : "<C-J>",
        \ "prev"  : "<C-K>",
        \ "pquit" : "q",
        \ }
" }}}

"" vim easyescape {{{
let g:easyescape_chars = { "k": 1, "j": 1 }
let g:easyescape_timeout = 300
"}}}

"" vim sneak {{{
let g:sneak#label = 1
"}}}

"" vim autopairs {{{
let g:AutoPairsShortcutFastWrap = "<C-e>"
let g:AutoPairsShortcutJump = '<C-l>'
let g:AutoPairsShortcutJumpBack = '<C-h>'

" let g:AutoPairs = {
            " \'(' : ')',
            " \'[' : ']',
            " \'{' : '}',
            " \"'" : "'",
            " \'"' : '"',
            " \'`' : '`',
            " \'<' : '>',
            " \}
" inoremap <c-l> <c-o>:call AutoPairsJump()<cr>
" }}}
"------------------------------------------- end of configs --------------------------------------------
